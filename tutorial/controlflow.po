# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Wey-Han Liaw <adrianliaw2000@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 05:02+0000\n"
"PO-Revision-Date: 2017-02-16 23:40+0000\n"
"Last-Translator: Wey-Han Liaw <adrianliaw2000@gmail.com>, 2021\n"
"Language-Team: Chinese (Taiwan) (https://www.transifex.com/python-doc/"
"teams/5390/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "深入了解流程控制"

#: ../../tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""
"除了剛才介紹的 :keyword:`while`，Python 擁有在其他程式語言中常用的流程控制語"
"法，並有ㄧ些不一樣的改變。"

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr ":keyword:`!if` 陳述式"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"或許最常見的陳述式種類就是 :keyword:`if` 了。舉例來說：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"可以有零個或多個 :keyword:`elif` 段落，且 :keyword:`else` 段落可有可無。關鍵"
"字 :keyword:`!elif` 只是「else if」的縮寫，並且用來避免過多的縮排。一個 :"
"keyword:`!if` ... :keyword:`!elif` ... :keyword:`!elif` ... 序列可以用來替代"
"其他語言中出現的 ``switch`` 或 ``case`` 陳述式。"

#: ../../tutorial/controlflow.rst:43
msgid ":keyword:`!for` Statements"
msgstr ":keyword:`!for` 陳述式"

#: ../../tutorial/controlflow.rst:48
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"在 Python 中的 :keyword:`for` 陳述式可能不同於在 C 或 Pascal 中所看到的使用方"
"式。與其只能疊代（iterate）一個等差級數（如 Pascal），或給與使用者定義疊代步"
"進方式與結束條件（如 C），Python 的 :keyword:`!for` 陳述疊代任何序列（list 或"
"者字串）的元素，以他們出現在序列中的順序。例如（無意雙關）：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:69
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""

#: ../../tutorial/controlflow.rst:88
msgid "The :func:`range` Function"
msgstr ":func:`range` 函式"

#: ../../tutorial/controlflow.rst:90
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"如果你需要疊代一個數列的話，使用內建 :func:`range` 函式就很方便。它可以生成一"
"等差級數：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:102
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"給定的結束值永遠不會出現在生成的序列中；\\ ``range(10)`` 生成的 10 個數值，即"
"對應存取一個長度為 10 的序列內每一個元素的索引值。也可以讓 range 從其他數值計"
"數，或者給定不同的級距（甚至為負；有時稱之為 step）：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:116
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"欲疊代一個序列的索引值，你可以搭配使用 :func:`range` 和 :func:`len` 如下：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:129
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"然而，在多數的情況，使用 :func:`enumerate` 函式將更為方便，詳見\\ :ref:`tut-"
"loopidioms`。"

#: ../../tutorial/controlflow.rst:132
msgid "A strange thing happens if you just print a range::"
msgstr ""
"如果直接印出一個 range 則會出現奇怪的輸出：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:137
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"在很多情況下，由 :func:`range` 回傳的物件的行為如同一個 list，但實際上它並不"
"是。它是一個物件在你疊代時會回傳想要的序列的連續元素，並不會真正建出這個序列"
"的 list，以節省空間。"

#: ../../tutorial/controlflow.rst:142
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""

#: ../../tutorial/controlflow.rst:151
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  Lastly, maybe you are curious about how to get a list from a "
"range. Here is the solution::"
msgstr ""

#: ../../tutorial/controlflow.rst:158
msgid ""
"In chapter :ref:`tut-structures`, we will discuss in more detail about :func:"
"`list`."
msgstr ""

#: ../../tutorial/controlflow.rst:164
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
":keyword:`break` 陳述，如同 C 語言，終止包含其最內部的 :keyword:`for` 或 :"
"keyword:`while` 迴圈。"

#: ../../tutorial/controlflow.rst:169
msgid ""
"Loop statements may have an :keyword:`!else` clause; it is executed when the "
"loop terminates through exhaustion of the iterable (with :keyword:`for`) or "
"when the condition becomes false (with :keyword:`while`), but not when the "
"loop is terminated by a :keyword:`break` statement.  This is exemplified by "
"the following loop, which searches for prime numbers::"
msgstr ""

#: ../../tutorial/controlflow.rst:193
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"（沒錯，這是正確的程式碼。請看仔細：``else`` 段落屬於 :keyword:`for` 迴"
"圈，\\ **並非** :keyword:`if` 陳述。）"

#: ../../tutorial/controlflow.rst:196
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of :"
"keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""

#: ../../tutorial/controlflow.rst:203
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
":keyword:`continue` 陳述，亦承襲於 C 語言，讓所屬的迴圈繼續執行下個疊代：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:223
msgid ":keyword:`!pass` Statements"
msgstr ""

#: ../../tutorial/controlflow.rst:225
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
":keyword:`pass` 陳述不執行任何動作。它用在語法上需要一個陳述但不需要執行任何"
"動作的時候。例如：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:232
msgid "This is commonly used for creating minimal classes::"
msgstr ""
"這經常用於定義一個最簡單的類別：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:238
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""

#: ../../tutorial/controlflow.rst:249
msgid "Defining Functions"
msgstr "定義函式 (function)"

#: ../../tutorial/controlflow.rst:251
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"我們可以建立一個函式來產生費式數列到任何一個上界：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:271
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"關鍵字 :keyword:`def` 帶入一個函式的\\ *定義*。它之後必須連著該函式的名稱和置"
"於括號之中的參數。自下一行起，所有縮排的陳述成為該函式的主體。"

#: ../../tutorial/controlflow.rst:276
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"一個函式的第一個陳述可以是一個字串值；此情況該字串值被視為該函式的說明文件字"
"串，即 :dfn:`docstring`\\ 。（關於 docstring 的細節請參見\\ :ref:`tut-"
"docstrings`\\ 段落。）有些工具可以使用 docstring 來自動產生線上或可列印的文"
"件，或讓使用者能自由地自原始碼中瀏覽文件。在原始碼中加入 docstring 是個好慣"
"例，應該養成這樣的習慣。"

#: ../../tutorial/controlflow.rst:283
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""

#: ../../tutorial/controlflow.rst:294
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""
"在一個函式被呼叫的時候，實際傳入的參數（引數）會被加入至該函數的區域符號表。"
"因此，引數傳入的方式為\\ *傳值呼叫 (call by value)*\\ （這裡傳遞的「值」永遠"
"是一個物件的\\ *參照（reference）*\\ ，而不是該物件的值）。\\ [#]_ 當一個函式"
"呼叫別的函式時，在被呼叫的函式中會建立一個新的區域符號表。"

#: ../../tutorial/controlflow.rst:300
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""

#: ../../tutorial/controlflow.rst:311
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"如果你是來自別的語言，你可能不同意 ``fib`` 是個函式，而是個程序 (procedure)，"
"因為它並沒有回傳值。實際上，即使一個函式缺少一個 :keyword:`return` 陳述，它亦"
"有一個固定的回傳值。這個值為 ``None``\\ （它是一個內建名稱）。在直譯器中單獨"
"使用 ``None`` 時，通常不會被顯示。你可以使用 :func:`print` 來看到它：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:322
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"如果要寫一個函式回傳費式數列的 list 而不是直接印出它，這也很容易：\n"
"\n"
"::"

#: ../../tutorial/controlflow.rst:338
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "這個例子一樣示範了一些新的 Python 特性："

#: ../../tutorial/controlflow.rst:340
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""

#: ../../tutorial/controlflow.rst:344
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""
"``result.append(a)`` 陳述呼叫了一個 list 物件的 ``result`` *method（方法）*。"
"method 為「屬於」一個物件的函式，命名規則為 ``obj.methodname``\\ ，其中 "
"``obj`` 為某個物件（亦可為一表達式），而 ``methodname`` 為該 method 的名稱，"
"並由該物件的型別所定義。不同的型別代表不同的 method。不同型別的 method 可以擁"
"有一樣的名稱而不會讓 Python 混淆。（你可以使用 *class* 定義自己的物件型別和 "
"method，見 :ref:`tut-classes`\\ ）這裡 :meth:`append` method 定義在 list 物件"
"中；它會加入一個新的元素在該 list 的末端。這個例子等同於 ``result = result + "
"[a]``\\ ，但更有效率。"

#: ../../tutorial/controlflow.rst:359
msgid "More on Defining Functions"
msgstr ""

#: ../../tutorial/controlflow.rst:361
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""

#: ../../tutorial/controlflow.rst:368
msgid "Default Argument Values"
msgstr ""

#: ../../tutorial/controlflow.rst:370
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""

#: ../../tutorial/controlflow.rst:386
msgid "This function can be called in several ways:"
msgstr ""

#: ../../tutorial/controlflow.rst:388
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""

#: ../../tutorial/controlflow.rst:390
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""

#: ../../tutorial/controlflow.rst:392
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""

#: ../../tutorial/controlflow.rst:395
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""

#: ../../tutorial/controlflow.rst:398
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""

#: ../../tutorial/controlflow.rst:409
msgid "will print ``5``."
msgstr ""

#: ../../tutorial/controlflow.rst:411
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""

#: ../../tutorial/controlflow.rst:424
msgid "This will print ::"
msgstr ""

#: ../../tutorial/controlflow.rst:430
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""

#: ../../tutorial/controlflow.rst:443
msgid "Keyword Arguments"
msgstr ""

#: ../../tutorial/controlflow.rst:445
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""

#: ../../tutorial/controlflow.rst:454
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""

#: ../../tutorial/controlflow.rst:465
msgid "but all the following calls would be invalid::"
msgstr ""

#: ../../tutorial/controlflow.rst:472
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""

#: ../../tutorial/controlflow.rst:488
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""

#: ../../tutorial/controlflow.rst:505
msgid "It could be called like this::"
msgstr ""

#: ../../tutorial/controlflow.rst:513
msgid "and of course it would print:"
msgstr ""

#: ../../tutorial/controlflow.rst:526
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""

#: ../../tutorial/controlflow.rst:530
msgid "Special parameters"
msgstr ""

#: ../../tutorial/controlflow.rst:532
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""

#: ../../tutorial/controlflow.rst:538
msgid "A function definition may look like:"
msgstr ""

#: ../../tutorial/controlflow.rst:549
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""

#: ../../tutorial/controlflow.rst:556
msgid "Positional-or-Keyword Arguments"
msgstr ""

#: ../../tutorial/controlflow.rst:558
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""

#: ../../tutorial/controlflow.rst:563
msgid "Positional-Only Parameters"
msgstr ""

#: ../../tutorial/controlflow.rst:565
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""

#: ../../tutorial/controlflow.rst:573
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""

#: ../../tutorial/controlflow.rst:577
msgid "Keyword-Only Arguments"
msgstr ""

#: ../../tutorial/controlflow.rst:579
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""

#: ../../tutorial/controlflow.rst:585
msgid "Function Examples"
msgstr ""

#: ../../tutorial/controlflow.rst:587
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""

#: ../../tutorial/controlflow.rst:603
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""

#: ../../tutorial/controlflow.rst:613
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""

#: ../../tutorial/controlflow.rst:624
msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""

#: ../../tutorial/controlflow.rst:635
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""

#: ../../tutorial/controlflow.rst:655
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""

#: ../../tutorial/controlflow.rst:660
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""

#: ../../tutorial/controlflow.rst:669
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""

#: ../../tutorial/controlflow.rst:676
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""

#: ../../tutorial/controlflow.rst:681
msgid "Recap"
msgstr ""

#: ../../tutorial/controlflow.rst:683
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""

#: ../../tutorial/controlflow.rst:687
msgid "As guidance:"
msgstr ""

#: ../../tutorial/controlflow.rst:689
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""

#: ../../tutorial/controlflow.rst:694
msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""

#: ../../tutorial/controlflow.rst:697
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""

#: ../../tutorial/controlflow.rst:703
msgid "Arbitrary Argument Lists"
msgstr ""

#: ../../tutorial/controlflow.rst:708
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""

#: ../../tutorial/controlflow.rst:717
msgid ""
"Normally, these ``variadic`` arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""

#: ../../tutorial/controlflow.rst:734
msgid "Unpacking Argument Lists"
msgstr ""

#: ../../tutorial/controlflow.rst:736
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""

#: ../../tutorial/controlflow.rst:752
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""

#: ../../tutorial/controlflow.rst:768
msgid "Lambda Expressions"
msgstr ""

#: ../../tutorial/controlflow.rst:770
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""

#: ../../tutorial/controlflow.rst:787
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""

#: ../../tutorial/controlflow.rst:799
msgid "Documentation Strings"
msgstr "說明文件字串"

#: ../../tutorial/controlflow.rst:806
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""

#: ../../tutorial/controlflow.rst:809
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""

#: ../../tutorial/controlflow.rst:815
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""

#: ../../tutorial/controlflow.rst:820
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace \"equivalent"
"\" to this indentation is then stripped from the start of all lines of the "
"string.  Lines that are indented less should not occur, but if they occur "
"all their leading whitespace should be stripped.  Equivalence of whitespace "
"should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""

#: ../../tutorial/controlflow.rst:832
msgid "Here is an example of a multi-line docstring::"
msgstr ""

#: ../../tutorial/controlflow.rst:850
msgid "Function Annotations"
msgstr ""

#: ../../tutorial/controlflow.rst:858
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""

#: ../../tutorial/controlflow.rst:862
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:"
"`__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a positional argument, a keyword argument, and the return value annotated::"
msgstr ""

#: ../../tutorial/controlflow.rst:884
msgid "Intermezzo: Coding Style"
msgstr ""

#: ../../tutorial/controlflow.rst:889
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""

#: ../../tutorial/controlflow.rst:895
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""

#: ../../tutorial/controlflow.rst:900
msgid "Use 4-space indentation, and no tabs."
msgstr ""

#: ../../tutorial/controlflow.rst:902
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""

#: ../../tutorial/controlflow.rst:906
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr ""

#: ../../tutorial/controlflow.rst:908
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""

#: ../../tutorial/controlflow.rst:911
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""

#: ../../tutorial/controlflow.rst:914
msgid "When possible, put comments on a line of their own."
msgstr ""

#: ../../tutorial/controlflow.rst:916
msgid "Use docstrings."
msgstr ""

#: ../../tutorial/controlflow.rst:918
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""

#: ../../tutorial/controlflow.rst:921
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""

#: ../../tutorial/controlflow.rst:926
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""

#: ../../tutorial/controlflow.rst:930
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""

#: ../../tutorial/controlflow.rst:936
msgid "Footnotes"
msgstr "註解"

#: ../../tutorial/controlflow.rst:937
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
